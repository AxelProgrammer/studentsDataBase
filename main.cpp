#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

#ifdef _WIN32
#include <windows.h>
#endif

// g++ -o main.exe main.cpp
// .\main.exe

struct Student {
    std::string name;
    int age;
    std::string major;
    double gpa;
};

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
std::string toLower(const std::string& str) {
    std::string lower = str;
    std::transform(lower.begin(), lower.end(), lower.begin(),
                   [](unsigned char c){ return std::tolower(c); });
    return lower;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
bool containsIgnoreCase(const std::string& text, const std::string& pattern) {
    return toLower(text).find(toLower(pattern)) != std::string::npos;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
void addStudent(std::vector<Student>& database) {
    Student student;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞: ";
    std::cin >> student.name;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: ";
    std::cin >> student.age;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞: ";
    std::cin >> student.major;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å—Ç—É–¥–µ–Ω—Ç–∞: ";
    std::cin >> student.gpa;

    database.push_back(student);
    std::cout << "–°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
void displayStudents(const std::vector<Student>& database) {
    std::cout << "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n";
    for (const Student& student : database) {
        std::cout << "–ò–º—è: " << student.name << "\n";
        std::cout << "–í–æ–∑—Ä–∞—Å—Ç: " << student.age << "\n";
        std::cout << "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: " << student.major << "\n";
        std::cout << "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: " << student.gpa << "\n\n";
    }
}

// –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
void searchByName(const std::vector<Student>& database, const std::string& name) {
    bool found = false;
    for (const auto& s : database) {
        if (containsIgnoreCase(s.name, name)) {
            if (!found) std::cout << "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ '" << name << "':\n";
            std::cout << "–ò–º—è: " << s.name << ", –í–æ–∑—Ä–∞—Å—Ç: " << s.age
                      << ", –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: " << s.major << ", –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: " << s.gpa << "\n";
            found = true;
        }
    }
    if (!found)
        std::cout << "–°—Ç—É–¥–µ–Ω—Ç—ã —Å –∏–º–µ–Ω–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '" << name << "', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n";
}

// –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
void searchByMajor(const std::vector<Student>& database, const std::string& major) {
    bool found = false;
    for (const auto& s : database) {
        if (containsIgnoreCase(s.major, major)) {
            if (!found) std::cout << "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ '" << major << "':\n";
            std::cout << "–ò–º—è: " << s.name << ", –í–æ–∑—Ä–∞—Å—Ç: " << s.age
                      << ", –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: " << s.major << ", –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: " << s.gpa << "\n";
            found = true;
        }
    }
    if (!found)
        std::cout << "–°—Ç—É–¥–µ–Ω—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å—é, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π '" << major << "', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n";
}

int main() {

    #ifdef _WIN32
        SetConsoleCP(65001);       
        SetConsoleOutputCP(65001);
    #endif

    std::vector<Student> database;

    int choice;
    do {
        std::cout << "–ú–µ–Ω—é:\n";
        std::cout << "1. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n";
        std::cout << "2. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n";
        std::cout << "3. –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n";
        std::cout << "4. –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n";
        std::cout << "0. –í—ã—Ö–æ–¥\n";
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                addStudent(database);
                break;
            case 2:
                displayStudents(database);
                break;
            case 3: {
                std::string name;
                std::cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏): ";
                std::cin >> name;
                searchByName(database, name);
                break;
            }
            case 4: {
                std::string major;
                std::cout << "–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (–∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è): ";
                std::cin >> major;
                searchByMajor(database, major);
                break;
            }
            case 0:
                std::cout << "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n";
                break;
            default:
                std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n";
        }
    } while (choice != 0);

    return 0;
}
